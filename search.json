[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mletrics",
    "section": "",
    "text": "pip install mletrics"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "mletrics",
    "section": "How to use",
    "text": "How to use\n\nfrom mletrics.stability import psi\nfrom mletrics.classification import ks\n\n\nCalculating psi values\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom scikitplot.metrics import plot_ks_statistic\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n\nfrom pathlib import Path\n\np = Path('..')\ndf = pd.read_csv(p/'datasets/titanic.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n    \n  \n\n\n\n\n\ncat_vars = ['Pclass', 'Sex', 'Embarked']\nnum_vars = ['Age', 'SibSp', 'Fare']\nfeatures = cat_vars + num_vars\ntarget = 'Survived'\n\nX = df[features].copy()\ny = df[target].copy()\n\n\nnum_pipe = Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='constant', fill_value=-999))\n])\n\ncat_pipe = Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n        ('ohe', OneHotEncoder(sparse=False, handle_unknown='ignore'))\n]) \n\ntransformers = ColumnTransformer(transformers=[\n                ('numeric', num_pipe, num_vars),\n                ('categoric', cat_pipe, cat_vars)\n])\n\nmodel = Pipeline(steps=[\n        ('transformers', transformers),\n        ('model', RandomForestClassifier(random_state=42, max_depth=3))\n])\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nmodel.fit(X_train, y_train)\n\ny_proba_train = model.predict_proba(X_train)[:,1]\ny_proba_test  = model.predict_proba(X_test)[:,1]\n\ncalculate psi value for the model probability between train and test\n\npsi(y_proba_train, y_proba_test)\n\n0.06001324825109782\n\n\n\nPSI < 0.1 - No change. You can continue using existing model.\nPSI >= 0.1 but less than 0.2 - Slight change is required.\nPSI >= 0.2 - Significant change is required. Ideally, you should not use this model any more.\n\nReference: https://www.listendata.com/2015/05/population-stability-index.html\n\n\nCalculating the KS\n\nks(y_test, y_proba_test)\n\n0.5886743886743887\n\n\nComparing with the ks calculated by scikit-plot:\n\nplot_ks_statistic(y_test, np.column_stack([1-y_proba_test, y_proba_test]))\n\n<AxesSubplot:title={'center':'KS Statistic Plot'}, xlabel='Threshold', ylabel='Percentage below threshold'>"
  },
  {
    "objectID": "stability.html#how-to-use",
    "href": "stability.html#how-to-use",
    "title": "Stability Metrics",
    "section": "How to Use",
    "text": "How to Use\n\nfrom mletrics.stability import psi\n\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n\nfrom pathlib import Path\n\np = Path('..')\ndf = pd.read_csv(p/'datasets/titanic.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n    \n  \n\n\n\n\n\ncat_vars = ['Pclass', 'Sex', 'Embarked']\nnum_vars = ['Age', 'SibSp', 'Fare']\nfeatures = cat_vars + num_vars\ntarget = 'Survived'\n\nX = df[features].copy()\ny = df[target].copy()\n\n\nnum_pipe = Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='constant', fill_value=-999))\n])\n\ncat_pipe = Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n        ('ohe', OneHotEncoder(sparse=False, handle_unknown='ignore'))\n]) \n\ntransformers = ColumnTransformer(transformers=[\n                ('numeric', num_pipe, num_vars),\n                ('categoric', cat_pipe, cat_vars)\n])\n\nmodel = Pipeline(steps=[\n        ('transformers', transformers),\n        ('model', RandomForestClassifier(random_state=42, max_depth=3))\n])\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nmodel.fit(X_train, y_train)\n\ny_proba_train = model.predict_proba(X_train)[:,1]\ny_proba_test  = model.predict_proba(X_test)[:,1]\n\nVamos calcular o psi da probabilidade predita pelo modelo entre treino e teste:\n\npsi(y_proba_train, y_proba_test)\n\n0.06001324825109782\n\n\n\nPSI < 0.1 - No change. You can continue using existing model.\nPSI >= 0.1 but less than 0.2 - Slight change is required.\nPSI >= 0.2 - Significant change is required. Ideally, you should not use this model any more.\n\nReference: https://www.listendata.com/2015/05/population-stability-index.html"
  },
  {
    "objectID": "classification.html",
    "href": "classification.html",
    "title": "Classification Metrics",
    "section": "",
    "text": "ks\n\n ks (y_true:numpy.ndarray, y_prob:numpy.ndarray)\n\n\n\n\n\nType\nDetails\n\n\n\n\ny_true\nndarray\nthe target variable, contains 0’s and 1’s\n\n\ny_prob\nndarray\nthe probability of the\n\n\n\n\n\nHow to Use\n\nfrom mletrics.classification import ks"
  }
]